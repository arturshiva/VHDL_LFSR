library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;


entity lfsr is
    port (
        clk        : in  STD_LOGIC;              -- Main clock
        en         : in  STD_LOGIC;              -- Clock enable input
        load_enable: in  STD_LOGIC;              -- Enable signal to load default/seed data
        load_data  : in  STD_LOGIC_VECTOR(3 downto 0); -- Default/seed data
        count      : out STD_LOGIC_VECTOR(3 downto 0); -- Register value
        done       : out STD_LOGIC               -- Done signal
    );
end lfsr;

architecture behavioral of lfsr is
    signal sig_reg     : std_logic_vector(3 downto 0);  -- Internal register
    signal sig_feedback: std_logic;                     -- Feedback signal
begin

    process (clk)
    begin
        if rising_edge(clk) then
            if en = '1' then
                if load_enable = '1' then
                    sig_reg <= load_data;  -- Load default/seed data
                else
                    -- Shift right by one bit
                    sig_reg <= sig_reg(2 downto 0) & sig_feedback;
                end if;
            end if;
        end if;
    end process;

    -- Create feedback for 4-bit LFSR counter
    sig_feedback <= sig_reg(3) xnor sig_reg(2);

    -- Assign internal register to output
    count <= sig_reg;

    -- Create a `done` output pulse
    done <= '1' when (sig_reg = load_data) else '0';

end behavioral;
